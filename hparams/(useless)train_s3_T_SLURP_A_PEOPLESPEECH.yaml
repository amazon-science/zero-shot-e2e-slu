# ############################################################################
# Model: Direct SLU
# Encoder: Pre-trained wav2vec2 -> LSTM
# Decoder: GRU + beamsearch
# Tokens: BPE with unigram
# losses: NLL
# Training: SLURP
# Authors:  Loren Lugosch, Mirco Ravanelli 2020 Boumadane Abdelmoumene, AbdelWahab Heba, Yingzhi Wang 2021
# For more wav2vec2/HuBERT results, please see https://arxiv.org/pdf/2111.02735.pdf
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are made
data_name: "slurp"
seed: 1986
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/<seed>/<data_name>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
# The SLURP dataset will be automatically downloaded in the specified data_folder
project_folder: /home/jfhe/Documents/MountHe/jfhe/projects/speechbrain
data_folder: !ref <project_folder>/datasets/SLURP # !<PLACEHOLDER> # e.g, /localscratch/SLURP
data_folder_rirs: !ref <data_folder>
train_splits: ["train_synthetic", "train_real"]
csv_train: !ref <output_folder>/train-type=direct.csv
csv_valid: !ref <output_folder>/devel-type=direct.csv
csv_test: !ref <output_folder>/test-type=direct.csv
tokenizer_file: speechbrain/SLU-direct-SLURP-hubert-enc
skip_prep: False
divide_csv_train: True
invs_csv_train: !ref <output_folder>/invs-train-type=direct.csv
vs_csv_train: !ref <output_folder>/vs-train-type=direct.csv

# URL for the wav2vec2 model, you can change to benchmark diffrenet models
wav2vec2_hub: "facebook/hubert-base-ls960"

# Training parameters
number_of_epochs: 35
batch_size: 4
lr: 0.0003
lr_wav2vec2: 0.00001
token_type: unigram # ["unigram", "bpe", "char"]
sorting: random
ckpt_interval_minutes: 15 # save checkpoint every N min

#freeze all wav2vec2
freeze_wav2vec2: False

#set to true to freeze the CONV part of the wav2vec2 model # might be not useful
freeze_wav2vec2_conv: True

# Model parameters
sample_rate: 16000
emb_size: 128
dec_neurons: 512
output_neurons: 58 # index(eos/bos) = 0
encoder_dim: 768

# Decoding parameters
bos_index: 0
eos_index: 0
min_decode_ratio: 0.0
max_decode_ratio: 10.0
slu_beam_size: 80
eos_threshold: 1.5
temperature: 1.25

dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Models
wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
    source: !ref <wav2vec2_hub>
    output_norm: True
    freeze: !ref <freeze_wav2vec2>
    save_path: !ref <save_folder>/wav2vec2_checkpoint

output_emb: !new:speechbrain.nnet.embedding.Embedding
    num_embeddings: !ref <output_neurons>
    embedding_dim: !ref <emb_size>

dec: !new:speechbrain.nnet.RNN.AttentionalRNNDecoder
    enc_dim: !ref <encoder_dim>
    input_size: !ref <emb_size>
    rnn_type: lstm
    attn_type: content
    hidden_size: !ref <dec_neurons>
    attn_dim: 512
    num_layers: 3
    scaling: 1.0
    dropout: 0.0

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dec_neurons>
    n_neurons: !ref <output_neurons>

augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

modules:
    wav2vec2: !ref <wav2vec2>
    output_emb: !ref <output_emb>
    dec: !ref <dec>
    seq_lin: !ref <seq_lin>

model: !new:torch.nn.ModuleList
    - [!ref <output_emb>,
       !ref <dec>, !ref <seq_lin>]

tokenizer: !new:sentencepiece.SentencePieceProcessor

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>/SLURP_tokenizer
    loadables:
        tokenizer: !ref <tokenizer>
    paths:
        tokenizer: !ref <tokenizer_file>/tokenizer_58_unigram.model

beam_searcher: !new:speechbrain.decoders.S2SRNNBeamSearcher
    embedding: !ref <output_emb>
    decoder: !ref <dec>
    linear: !ref <seq_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <slu_beam_size>
    eos_threshold: !ref <eos_threshold>
    temperature: !ref <temperature>
    using_max_attn_shift: False
    max_attn_shift: 30
    coverage_penalty: 0.

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>

wav2vec2_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_wav2vec2>

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.8
    patient: 0

lr_annealing_wav2vec2: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_wav2vec2>
    improvement_threshold: 0.0025
    annealing_factor: 0.9

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        wav2vec2: !ref <wav2vec2>
        scheduler: !ref <lr_annealing>
        lr_annealing_wav2vec2: !ref <lr_annealing_wav2vec2>
        counter: !ref <epoch_counter>

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

seq_cost: !name:speechbrain.nnet.losses.nll_loss
    label_smoothing: 0.1

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True


## below is for auxiliary data
# ############################################################################
# Model: E2E ASR with attention-based ASR
# Encoder: CRDNN model
# Decoder: GRU + beamsearch + RNNLM
# Tokens: BPE with unigram
# losses: CTC+ NLL
# Training: Librispeech 960h
# Authors:  Ju-Chieh Chou, Mirco Ravanelli, Abdel Heba, Peter Plantinga,
# Samuele Cornell 2020
# ############################################################################

# This yaml file is revised based on part of "recipes/LibriSpeech/seq2seq/train_BPE_1000.yaml"
aux_data_name: "peoplespeech"

# Seed needs to be set at top of yaml, before objects with parameters
aux_output_folder: !ref results/aux_output/<seed>/<aux_data_name>
aux_wer_file: !ref <output_folder>/wer.txt
aux_save_folder: !ref <output_folder>/save
aux_train_log: !ref <output_folder>/train_log.txt

# Language model (LM) pretraining
# NB: To avoid mismatch, the speech recognizer must be trained with the same
# tokenizer used for LM training. Here, we download everything from the
# speechbrain HuggingFace repository. However, a local path pointing to a
# directory containing the lm.ckpt and tokenizer.ckpt may also be specified
# instead. E.g if you want to use your own LM / tokenizer.
aux_pretrained_lm_tokenizer_path: speechbrain/asr-crdnn-rnnlm-librispeech

# Data files
aux_data_folder: !ref <project_folder>/datasets/peoplespeech # !PLACEHOLDER # e,g./path/to/LibriSpeech
# noise/ris dataset will automatically be downloaded
aux_data_folder_rirs: !ref <aux_data_folder> # where to store noisy data for augment (change it if needed)

#aux_train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
#aux_dev_splits: ["dev-clean"]
#aux_test_splits: ["test-clean", "test-other"]
aux_skip_prep: False
aux_ckpt_interval_minutes: 15 # save checkpoint every N min
aux_csv_train: !ref <aux_output_folder>/peoplespeech_train.csv
aux_csv_valid: !ref <aux_output_folder>/peoplespeech_dev.csv
aux_csv_test: !ref <aux_output_folder>/peoplespeech_test.csv

# Training parameters
aux_batch_size: 8
aux_sorting: random
aux_dynamic_batching: False

# dynamic batching parameters, if used
aux_dynamic_batch_sampler:
   feats_hop_size: 0.01
   max_batch_len: 20000 # in terms of frames
   shuffle_ex: True
   batch_ordering: random
   num_buckets: 20

# Feature parameters
aux_sample_rate: 16000
aux_n_fft: 400
aux_n_mels: 40

# Dataloader options
aux_train_dataloader_opts:
   batch_size: !ref <aux_batch_size>

aux_valid_dataloader_opts:
   batch_size: !ref <aux_batch_size>

aux_test_dataloader_opts:
   batch_size: !ref <aux_batch_size>

# Model parameters
aux_output_neurons: 1000  # Number of tokens (same as LM)
aux_emb_size: 128

# This is the RNNLM that is used according to the Huggingface repository
# NB: It has to match the pre-trained RNNLM!!
aux_lm_model: !new:speechbrain.lobes.models.RNNLM.RNNLM
   output_neurons: !ref <aux_output_neurons>
   embedding_dim: !ref <aux_emb_size>
   activation: !name:torch.nn.LeakyReLU
   dropout: 0.0
   rnn_layers: 2
   rnn_neurons: 2048
   dnn_blocks: 1
   dnn_neurons: 512
   return_hidden: True  # For inference

aux_tokenizer: !new:sentencepiece.SentencePieceProcessor


### word2vector related items
word2vec_name: "glove"
word2vec_pretrained_path: !ref <project_folder>/pretrained_models
recalculate_word2vec: False # need attention to set correctly
aux_recalculate_word2vec: False # need attention to set correctly

### cluster related item
recalculate_cluster_mean: False
word2vec_cluster_model:
#  name: "dbscan"
#  min_samples: 200
#  eps: 0.05
#  metric: 'cosine'
  name: "kmeans"
  n_clusters: 2000
  n_init: 10

cluster_res_path: !ref <output_folder>/cluster_res.npy

### select aux samples items
cal_filter_res_by_text_similary: False # need to set with attention
filter_res_by_text_similary_dir: !ref <output_folder>/<data_name>_<aux_data_name>
filter_res_by_text_similary_path: !ref <filter_res_by_text_similary_dir>/filter_res_by_text_similary.npy
filter_by_sim:
  threshold: 0.1 # even it is cosine similarity, it is smaller to be better due to sklearn returns (1 - cosine)

filter_by_label_ratio: False
#filter_res_by_label_ratio_path: !ref <output_folder>/filter_res_by_label_ratio.npy

#aux_divide_csv_train: False
recal_filter_csv: False
seleted_aux_csv_wo: !ref <filter_res_by_text_similary_dir>/selected_aux_train_wo_syn_label.csv
seleted_aux_csv_wi: !ref <filter_res_by_text_similary_dir>/selected_aux_train_wi_syn_label.csv


###### below NLU model related
## Models
#slu_enc: !new:speechbrain.nnet.containers.Sequential
#    input_shape: [null, null, !ref <emb_size>]
#    lstm: !new:speechbrain.nnet.RNN.LSTM
#        input_size: !ref <emb_size>
#        bidirectional: True
#        hidden_size: !ref <encoder_dim>
#        num_layers: 2
#    linear: !new:speechbrain.nnet.linear.Linear
#        input_size: !ref <encoder_dim> * 2
#        n_neurons: !ref <encoder_dim>
#
#input_emb: !new:speechbrain.nnet.embedding.Embedding
#    num_embeddings: !ref <num_asr_tokens>
#    embedding_dim: !ref <emb_size>
#
#output_emb: !new:speechbrain.nnet.embedding.Embedding
#    num_embeddings: !ref <output_neurons>
#    embedding_dim: !ref <emb_size>
#
#dec: !new:speechbrain.nnet.RNN.AttentionalRNNDecoder
#    enc_dim: !ref <encoder_dim>
#    input_size: !ref <emb_size>
#    rnn_type: gru
#    attn_type: keyvalue
#    hidden_size: !ref <dec_neurons>
#    attn_dim: 512
#    num_layers: 3
#    scaling: 1.0
#    dropout: 0.0
#
#seq_lin: !new:speechbrain.nnet.linear.Linear
#    input_size: !ref <dec_neurons>
#    n_neurons: !ref <output_neurons>
#
#modules:
#    slu_enc: !ref <slu_enc>
#    input_emb: !ref <input_emb>
#    output_emb: !ref <output_emb>
#    dec: !ref <dec>
#    seq_lin: !ref <seq_lin>
#
#model: !new:torch.nn.ModuleList
#    - [!ref <slu_enc>, !ref <input_emb>, !ref <output_emb>,
#       !ref <dec>, !ref <seq_lin>]
#
#asr_tokenizer: !new:sentencepiece.SentencePieceProcessor
#slu_tokenizer: !new:sentencepiece.SentencePieceProcessor
#
#pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
#    collect_in: !ref <save_folder>/tokenizers
#    loadables:
#        asr_tokenizer: !ref <asr_tokenizer>
#        slu_tokenizer: !ref <slu_tokenizer>
#    paths:
#        asr_tokenizer: !ref <asr_tokenizer_file>
#        slu_tokenizer: !ref <slu_tokenizer_file>
#
#beam_searcher: !new:speechbrain.decoders.S2SRNNBeamSearcher
#    embedding: !ref <output_emb>
#    decoder: !ref <dec>
#    linear: !ref <seq_lin>
#    bos_index: !ref <bos_index>
#    eos_index: !ref <eos_index>
#    min_decode_ratio: !ref <min_decode_ratio>
#    max_decode_ratio: !ref <max_decode_ratio>
#    beam_size: !ref <slu_beam_size>
#    eos_threshold: !ref <eos_threshold>
#    temperature: !ref <temperature>
#    using_max_attn_shift: False
#    max_attn_shift: 30
#    coverage_penalty: 0.
#
#opt_class: !name:torch.optim.Adam
#    lr: !ref <lr>
#
#lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
#    initial_value: !ref <lr>
#    improvement_threshold: 0.0025
#    annealing_factor: 0.8
#    patient: 0
#
#checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
#    checkpoints_dir: !ref <save_folder>
#    recoverables:
#        model: !ref <model>
#        scheduler: !ref <lr_annealing>
#        counter: !ref <epoch_counter>
#
#augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
#    sample_rate: !ref <sample_rate>
#    speeds: [95, 100, 105]
#
#log_softmax: !new:speechbrain.nnet.activations.Softmax
#    apply_log: True
#
#seq_cost: !name:speechbrain.nnet.losses.nll_loss
#    label_smoothing: 0.1
#
#train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
#    save_file: !ref <train_log>
#
#error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
#
#cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
#    split_tokens: True
###### above NLU model related